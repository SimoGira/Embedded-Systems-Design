-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xtea is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    word0 : IN STD_LOGIC_VECTOR (31 downto 0);
    word1 : IN STD_LOGIC_VECTOR (31 downto 0);
    key0 : IN STD_LOGIC_VECTOR (31 downto 0);
    key1 : IN STD_LOGIC_VECTOR (31 downto 0);
    key2 : IN STD_LOGIC_VECTOR (31 downto 0);
    key3 : IN STD_LOGIC_VECTOR (31 downto 0);
    mode : IN STD_LOGIC;
    result0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result0_ap_vld : OUT STD_LOGIC;
    result1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result1_ap_vld : OUT STD_LOGIC );
end;


architecture behav of xtea is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "xtea,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=14.263750,HLS_SYN_LAT=33,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=217,HLS_SYN_LUT=1595,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv37_0 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv38_C6EF3720 : STD_LOGIC_VECTOR (37 downto 0) := "00000011000110111011110011011100100000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv37_9E3779B9 : STD_LOGIC_VECTOR (36 downto 0) := "0000010011110001101110111100110111001";
    constant ap_const_lv13_19B9 : STD_LOGIC_VECTOR (12 downto 0) := "1100110111001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_800 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_9E3779B9 : STD_LOGIC_VECTOR (31 downto 0) := "10011110001101110111100110111001";
    constant ap_const_lv38_3F61C88647 : STD_LOGIC_VECTOR (37 downto 0) := "11111101100001110010001000011001000111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_61C88647 : STD_LOGIC_VECTOR (31 downto 0) := "01100001110010001000011001000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mode_read_read_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_256_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal v0_2_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_3_fu_380_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal v1_4_fu_516_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_528_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal v1_2_fu_656_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_2_fu_666_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal v0_4_fu_784_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_reg_146 : STD_LOGIC_VECTOR (36 downto 0);
    signal i_reg_157 : STD_LOGIC_VECTOR (5 downto 0);
    signal v0_reg_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal v1_reg_177 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_reg_186 : STD_LOGIC_VECTOR (37 downto 0);
    signal i_1_reg_197 : STD_LOGIC_VECTOR (5 downto 0);
    signal v0_1_reg_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal v1_1_reg_217 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_v0_3_phi_fu_229_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_v1_3_phi_fu_241_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_262_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_296_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel7_fu_308_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_328_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_43_fu_322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_fu_338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel8_fu_314_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_354_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_348_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_fu_376_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum_3_cast_fu_386_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_47_fu_392_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_25_fu_402_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_26_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel9_fu_440_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel10_fu_452_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_472_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_48_fu_466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_fu_482_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_486_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel11_fu_458_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp17_fu_498_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_504_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_fu_492_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_fu_510_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_534_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_544_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_3_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel1_fu_582_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel2_fu_594_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_614_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_12_fu_608_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_624_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_628_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel3_fu_600_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_640_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_644_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_634_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_650_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_662_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_2_cast_fu_672_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_16_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel4_fu_708_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel5_fu_720_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_740_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_29_fu_734_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_750_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_754_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel6_fu_726_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp16_fu_766_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_772_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_760_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_778_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((mode_read_read_fu_90_p2 = ap_const_lv1_1)) then
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    i_1_reg_197 <= ap_const_lv6_0;
                elsif (((tmp_fu_522_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    i_1_reg_197 <= i_2_fu_528_p2;
                end if;
            end if; 
        end if;
    end process;

    i_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((mode_read_read_fu_90_p2 = ap_const_lv1_0)) then
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    i_reg_157 <= ap_const_lv6_0;
                elsif (((tmp_1_fu_250_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    i_reg_157 <= i_3_fu_256_p2;
                end if;
            end if; 
        end if;
    end process;

    sum_1_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((mode_read_read_fu_90_p2 = ap_const_lv1_1)) then
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    sum_1_reg_186 <= ap_const_lv38_C6EF3720;
                elsif (((tmp_fu_522_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    sum_1_reg_186 <= sum_2_fu_666_p2;
                end if;
            end if; 
        end if;
    end process;

    sum_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((mode_read_read_fu_90_p2 = ap_const_lv1_0)) then
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    sum_reg_146 <= ap_const_lv37_0;
                elsif (((tmp_1_fu_250_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    sum_reg_146 <= sum_3_fu_380_p2;
                end if;
            end if; 
        end if;
    end process;

    v0_1_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((mode_read_read_fu_90_p2 = ap_const_lv1_1)) then
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    v0_1_reg_208 <= word0;
                elsif (((tmp_fu_522_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    v0_1_reg_208 <= v0_4_fu_784_p2;
                end if;
            end if; 
        end if;
    end process;

    v0_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((mode_read_read_fu_90_p2 = ap_const_lv1_0)) then
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    v0_reg_168 <= word0;
                elsif (((tmp_1_fu_250_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    v0_reg_168 <= v0_2_fu_370_p2;
                end if;
            end if; 
        end if;
    end process;

    v1_1_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((mode_read_read_fu_90_p2 = ap_const_lv1_1)) then
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    v1_1_reg_217 <= word1;
                elsif (((tmp_fu_522_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    v1_1_reg_217 <= v1_2_fu_656_p2;
                end if;
            end if; 
        end if;
    end process;

    v1_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((mode_read_read_fu_90_p2 = ap_const_lv1_0)) then
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    v1_reg_177 <= word1;
                elsif (((tmp_1_fu_250_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    v1_reg_177 <= v1_4_fu_516_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, mode_read_read_fu_90_p2, ap_CS_fsm_state2, tmp_1_fu_250_p2, tmp_fu_522_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (((tmp_fu_522_p2 = ap_const_lv1_1) and (mode_read_read_fu_90_p2 = ap_const_lv1_1)) or ((tmp_1_fu_250_p2 = ap_const_lv1_1) and (mode_read_read_fu_90_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(mode_read_read_fu_90_p2, ap_CS_fsm_state2, tmp_1_fu_250_p2, tmp_fu_522_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (((tmp_fu_522_p2 = ap_const_lv1_1) and (mode_read_read_fu_90_p2 = ap_const_lv1_1)) or ((tmp_1_fu_250_p2 = ap_const_lv1_1) and (mode_read_read_fu_90_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_v0_3_phi_fu_229_p4_assign_proc : process(mode_read_read_fu_90_p2, ap_CS_fsm_state2, tmp_1_fu_250_p2, tmp_fu_522_p2, v0_reg_168, v0_1_reg_208)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
            if (((tmp_1_fu_250_p2 = ap_const_lv1_1) and (mode_read_read_fu_90_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_v0_3_phi_fu_229_p4 <= v0_reg_168;
            elsif (((tmp_fu_522_p2 = ap_const_lv1_1) and (mode_read_read_fu_90_p2 = ap_const_lv1_1))) then 
                ap_phi_mux_v0_3_phi_fu_229_p4 <= v0_1_reg_208;
            else 
                ap_phi_mux_v0_3_phi_fu_229_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_v0_3_phi_fu_229_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_v1_3_phi_fu_241_p4_assign_proc : process(mode_read_read_fu_90_p2, ap_CS_fsm_state2, tmp_1_fu_250_p2, tmp_fu_522_p2, v1_reg_177, v1_1_reg_217)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
            if (((tmp_1_fu_250_p2 = ap_const_lv1_1) and (mode_read_read_fu_90_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_v1_3_phi_fu_241_p4 <= v1_reg_177;
            elsif (((tmp_fu_522_p2 = ap_const_lv1_1) and (mode_read_read_fu_90_p2 = ap_const_lv1_1))) then 
                ap_phi_mux_v1_3_phi_fu_241_p4 <= v1_1_reg_217;
            else 
                ap_phi_mux_v1_3_phi_fu_241_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_v1_3_phi_fu_241_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(mode_read_read_fu_90_p2, ap_CS_fsm_state2, tmp_1_fu_250_p2, tmp_fu_522_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (((tmp_fu_522_p2 = ap_const_lv1_1) and (mode_read_read_fu_90_p2 = ap_const_lv1_1)) or ((tmp_1_fu_250_p2 = ap_const_lv1_1) and (mode_read_read_fu_90_p2 = ap_const_lv1_0))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_528_p2 <= std_logic_vector(unsigned(i_1_reg_197) + unsigned(ap_const_lv6_1));
    i_3_fu_256_p2 <= std_logic_vector(unsigned(i_reg_157) + unsigned(ap_const_lv6_1));
    mode_read_read_fu_90_p2 <= (0=>mode, others=>'-');
    newSel10_fu_452_p3 <= 
        key2 when (tmp_30_fu_422_p2(0) = '1') else 
        key3;
    newSel11_fu_458_p3 <= 
        newSel9_fu_440_p3 when (or_cond3_fu_446_p2(0) = '1') else 
        newSel10_fu_452_p3;
    newSel1_fu_582_p3 <= 
        key1 when (sel_tmp3_fu_576_p2(0) = '1') else 
        key0;
    newSel2_fu_594_p3 <= 
        key2 when (tmp_8_fu_564_p2(0) = '1') else 
        key3;
    newSel3_fu_600_p3 <= 
        newSel1_fu_582_p3 when (or_cond1_fu_588_p2(0) = '1') else 
        newSel2_fu_594_p3;
    newSel4_fu_708_p3 <= 
        key1 when (sel_tmp7_fu_702_p2(0) = '1') else 
        key0;
    newSel5_fu_720_p3 <= 
        key2 when (tmp_27_fu_690_p2(0) = '1') else 
        key3;
    newSel6_fu_726_p3 <= 
        newSel4_fu_708_p3 when (or_cond2_fu_714_p2(0) = '1') else 
        newSel5_fu_720_p3;
    newSel7_fu_308_p3 <= 
        key2 when (tmp_9_fu_278_p2(0) = '1') else 
        key3;
    newSel8_fu_314_p3 <= 
        newSel_fu_296_p3 when (or_cond_fu_302_p2(0) = '1') else 
        newSel7_fu_308_p3;
    newSel9_fu_440_p3 <= 
        key1 when (sel_tmp6_fu_434_p2(0) = '1') else 
        key0;
    newSel_fu_296_p3 <= 
        key1 when (sel_tmp2_fu_290_p2(0) = '1') else 
        key0;
    or_cond1_fu_588_p2 <= (tmp_3_fu_552_p2 or sel_tmp3_fu_576_p2);
    or_cond2_fu_714_p2 <= (tmp_16_fu_678_p2 or sel_tmp7_fu_702_p2);
    or_cond3_fu_446_p2 <= (tmp_26_fu_410_p2 or sel_tmp6_fu_434_p2);
    or_cond_fu_302_p2 <= (tmp_5_fu_266_p2 or sel_tmp2_fu_290_p2);
    result0 <= ap_phi_mux_v0_3_phi_fu_229_p4;

    result0_ap_vld_assign_proc : process(mode_read_read_fu_90_p2, ap_CS_fsm_state2, tmp_1_fu_250_p2, tmp_fu_522_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (((tmp_fu_522_p2 = ap_const_lv1_1) and (mode_read_read_fu_90_p2 = ap_const_lv1_1)) or ((tmp_1_fu_250_p2 = ap_const_lv1_1) and (mode_read_read_fu_90_p2 = ap_const_lv1_0))))) then 
            result0_ap_vld <= ap_const_logic_1;
        else 
            result0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    result1 <= ap_phi_mux_v1_3_phi_fu_241_p4;

    result1_ap_vld_assign_proc : process(mode_read_read_fu_90_p2, ap_CS_fsm_state2, tmp_1_fu_250_p2, tmp_fu_522_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (((tmp_fu_522_p2 = ap_const_lv1_1) and (mode_read_read_fu_90_p2 = ap_const_lv1_1)) or ((tmp_1_fu_250_p2 = ap_const_lv1_1) and (mode_read_read_fu_90_p2 = ap_const_lv1_0))))) then 
            result1_ap_vld <= ap_const_logic_1;
        else 
            result1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp1_fu_284_p2 <= (tmp_5_fu_266_p2 xor ap_const_lv1_1);
    sel_tmp2_fu_290_p2 <= (tmp_7_fu_272_p2 and sel_tmp1_fu_284_p2);
    sel_tmp3_fu_576_p2 <= (tmp_6_fu_558_p2 and sel_tmp_fu_570_p2);
    sel_tmp4_fu_696_p2 <= (tmp_16_fu_678_p2 xor ap_const_lv1_1);
    sel_tmp5_fu_428_p2 <= (tmp_26_fu_410_p2 xor ap_const_lv1_1);
    sel_tmp6_fu_434_p2 <= (tmp_28_fu_416_p2 and sel_tmp5_fu_428_p2);
    sel_tmp7_fu_702_p2 <= (tmp_17_fu_684_p2 and sel_tmp4_fu_696_p2);
    sel_tmp_fu_570_p2 <= (tmp_3_fu_552_p2 xor ap_const_lv1_1);
    sum_2_cast_fu_672_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(tmp_22_fu_662_p1));
    sum_2_fu_666_p2 <= std_logic_vector(signed(ap_const_lv38_3F61C88647) + signed(sum_1_reg_186));
    sum_3_cast_fu_386_p2 <= std_logic_vector(signed(ap_const_lv13_19B9) + signed(tmp_46_fu_376_p1));
    sum_3_fu_380_p2 <= std_logic_vector(unsigned(ap_const_lv37_9E3779B9) + unsigned(sum_reg_146));
    tmp16_fu_766_p2 <= std_logic_vector(unsigned(ap_const_lv32_61C88647) + unsigned(newSel6_fu_726_p3));
    tmp17_fu_498_p2 <= std_logic_vector(signed(ap_const_lv32_9E3779B9) + signed(newSel11_fu_458_p3));
    tmp_10_fu_628_p2 <= (tmp_15_fu_624_p1 xor tmp_12_fu_608_p2);
    tmp_11_fu_634_p2 <= std_logic_vector(unsigned(tmp_10_fu_628_p2) + unsigned(v0_1_reg_208));
    tmp_12_fu_608_p2 <= std_logic_vector(shift_left(unsigned(v0_1_reg_208),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    tmp_13_fu_644_p2 <= std_logic_vector(unsigned(newSel3_fu_600_p3) + unsigned(tmp_18_fu_640_p1));
    tmp_14_fu_650_p2 <= (tmp_13_fu_644_p2 xor tmp_11_fu_634_p2);
    tmp_15_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_614_p4),32));
    tmp_16_fu_678_p2 <= "1" when (sum_2_cast_fu_672_p2 = ap_const_lv2_0) else "0";
    tmp_17_fu_684_p2 <= "1" when (sum_2_cast_fu_672_p2 = ap_const_lv2_1) else "0";
    tmp_18_fu_640_p1 <= sum_1_reg_186(32 - 1 downto 0);
    tmp_19_fu_328_p4 <= v1_reg_177(31 downto 5);
    tmp_1_fu_250_p2 <= "1" when (i_reg_157 = ap_const_lv6_20) else "0";
    tmp_20_fu_342_p2 <= (tmp_44_fu_338_p1 xor tmp_43_fu_322_p2);
    tmp_21_fu_348_p2 <= std_logic_vector(unsigned(tmp_20_fu_342_p2) + unsigned(v1_reg_177));
    tmp_22_fu_662_p1 <= sum_1_reg_186(2 - 1 downto 0);
    tmp_23_fu_358_p2 <= std_logic_vector(unsigned(newSel8_fu_314_p3) + unsigned(tmp_45_fu_354_p1));
    tmp_24_fu_364_p2 <= (tmp_23_fu_358_p2 xor tmp_21_fu_348_p2);
    tmp_25_fu_402_p3 <= (tmp_47_fu_392_p4 & ap_const_lv11_0);
    tmp_26_fu_410_p2 <= "1" when (tmp_25_fu_402_p3 = ap_const_lv13_0) else "0";
    tmp_27_fu_690_p2 <= "1" when (sum_2_cast_fu_672_p2 = ap_const_lv2_2) else "0";
    tmp_28_fu_416_p2 <= "1" when (tmp_25_fu_402_p3 = ap_const_lv13_800) else "0";
    tmp_29_fu_734_p2 <= std_logic_vector(shift_left(unsigned(v1_2_fu_656_p2),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    tmp_2_fu_544_p3 <= (tmp_s_fu_534_p4 & ap_const_lv11_0);
    tmp_30_fu_422_p2 <= "1" when (tmp_25_fu_402_p3 = ap_const_lv13_1000) else "0";
    tmp_31_fu_740_p4 <= v1_2_fu_656_p2(31 downto 5);
    tmp_32_fu_754_p2 <= (tmp_36_fu_750_p1 xor tmp_29_fu_734_p2);
    tmp_33_fu_760_p2 <= std_logic_vector(unsigned(v1_2_fu_656_p2) + unsigned(tmp_32_fu_754_p2));
    tmp_34_fu_772_p2 <= std_logic_vector(unsigned(tmp16_fu_766_p2) + unsigned(tmp_18_fu_640_p1));
    tmp_35_fu_778_p2 <= (tmp_34_fu_772_p2 xor tmp_33_fu_760_p2);
    tmp_36_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_740_p4),32));
    tmp_37_fu_262_p1 <= sum_reg_146(2 - 1 downto 0);
    tmp_38_fu_472_p4 <= v0_2_fu_370_p2(31 downto 5);
    tmp_39_fu_486_p2 <= (tmp_49_fu_482_p1 xor tmp_48_fu_466_p2);
    tmp_3_fu_552_p2 <= "1" when (tmp_2_fu_544_p3 = ap_const_lv13_0) else "0";
    tmp_40_fu_492_p2 <= std_logic_vector(unsigned(v0_2_fu_370_p2) + unsigned(tmp_39_fu_486_p2));
    tmp_41_fu_504_p2 <= std_logic_vector(unsigned(tmp17_fu_498_p2) + unsigned(tmp_45_fu_354_p1));
    tmp_42_fu_510_p2 <= (tmp_41_fu_504_p2 xor tmp_40_fu_492_p2);
    tmp_43_fu_322_p2 <= std_logic_vector(shift_left(unsigned(v1_reg_177),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    tmp_44_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_328_p4),32));
    tmp_45_fu_354_p1 <= sum_reg_146(32 - 1 downto 0);
    tmp_46_fu_376_p1 <= sum_reg_146(13 - 1 downto 0);
    tmp_47_fu_392_p4 <= sum_3_cast_fu_386_p2(12 downto 11);
    tmp_48_fu_466_p2 <= std_logic_vector(shift_left(unsigned(v0_2_fu_370_p2),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    tmp_49_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_472_p4),32));
    tmp_4_fu_614_p4 <= v0_1_reg_208(31 downto 5);
    tmp_5_fu_266_p2 <= "1" when (tmp_37_fu_262_p1 = ap_const_lv2_0) else "0";
    tmp_6_fu_558_p2 <= "1" when (tmp_2_fu_544_p3 = ap_const_lv13_800) else "0";
    tmp_7_fu_272_p2 <= "1" when (tmp_37_fu_262_p1 = ap_const_lv2_1) else "0";
    tmp_8_fu_564_p2 <= "1" when (tmp_2_fu_544_p3 = ap_const_lv13_1000) else "0";
    tmp_9_fu_278_p2 <= "1" when (tmp_37_fu_262_p1 = ap_const_lv2_2) else "0";
    tmp_fu_522_p2 <= "1" when (i_1_reg_197 = ap_const_lv6_20) else "0";
    tmp_s_fu_534_p4 <= sum_1_reg_186(12 downto 11);
    v0_2_fu_370_p2 <= std_logic_vector(unsigned(tmp_24_fu_364_p2) + unsigned(v0_reg_168));
    v0_4_fu_784_p2 <= std_logic_vector(unsigned(v0_1_reg_208) - unsigned(tmp_35_fu_778_p2));
    v1_2_fu_656_p2 <= std_logic_vector(unsigned(v1_1_reg_217) - unsigned(tmp_14_fu_650_p2));
    v1_4_fu_516_p2 <= std_logic_vector(unsigned(tmp_42_fu_510_p2) + unsigned(v1_reg_177));
end behav;
